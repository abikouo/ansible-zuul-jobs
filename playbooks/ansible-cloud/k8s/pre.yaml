---
- name: Deploy kubernetes cluster on appliance
  hosts: appliance-ssh
  gather_facts: false
  tasks:
    - name: Run ensure-docker role
      import_role:
        name: ensure-docker

    - name: Install Kubernetes cluster
      import_role:
        name: setup-kind
      vars:
        kind_host_public_ip: "{{ hostvars['kubernetes']['nodepool']['interface_ip']}}"

    - set_fact:
        k8sadmin: "k8s-cluster-admin"
        k8sadmin_namespace: "kube-system"
        k8sadmin_view: "k8s-cluster-view"
        k8sadmin_secret_reader: "k8s-secret-reader"

    - name: create service account
      command: "kubectl create serviceaccount {{ k8sadmin }} -n {{ k8sadmin_namespace }}"
      become: true

    - name: cluster role binding (cluster admin)
      command: "kubectl create clusterrolebinding {{ k8sadmin }} --clusterrole=cluster-admin --serviceaccount={{ k8sadmin_namespace }}:{{ k8sadmin }}"
      become: true

    - name: cluster role binding (view)
      command: "kubectl create clusterrolebinding {{ k8sadmin_view }} --clusterrole view --user {{ k8sadmin }}"
      become: true

    - name: cluster role secreat reader
      command: "kubectl create clusterrolebinding {{ k8sadmin_secret_reader }} --clusterrole secret-reader --user {{ k8sadmin }}"
      become: true

    - name: Read service account details
      command: "kubectl -n {{ k8sadmin_namespace }} get serviceaccount/{{ k8sadmin }} -o jsonpath='{.secrets[0].name}'"
      become: true
      register: _result

    - name: Get Api token for admin service account
      command: "kubectl -n {{ k8sadmin_namespace }} get secret {{ _result.stdout }} -o jsonpath='{.data.token}'"
      become: true
      register: _result

    - name: define api key
      set_fact:
        k8s_api_token: "{{ _result.stdout | b64decode }}"
      no_log: true

    - debug: var=k8s_api_token

    - name: create file containing api token
      copy:
        dest: /tmp/kubeconfig_api.token
        content: "{{ k8s_api_token }}"

- name: Configure controller
  hosts: controller
  tasks:
    - name: Ensure controller directory exists
      file:
        path: "{{ ansible_user_dir }}/zuul-output/logs/controller"
        state: directory

    - name: Ensure tox is present
      include_role:
        name: ensure-tox

    - name: Setup base virtualenv_options
      set_fact:
        _virtualenv_options: "--python python{{ ansible_test_python }}"

    - name: Create virtualenv for ansible-test
      shell: "virtualenv {{ _virtualenv_options }} {{ ansible_test_venv_path }}"

    - name: Upgrade pip
      shell: "{{ ansible_test_venv_path }}/bin/pip install --upgrade pip"

    - name: Install SELinux Python bindings using yum
      yum:
        name: libselinux-python3
        state: present
      become: true

    - name: Install Ansible into virtualenv
      shell: "{{ ansible_test_venv_path }}/bin/pip install {{ ansible_user_dir }}/{{ zuul.projects['github.com/ansible/ansible'].src_dir }} 'jinja2<3.0.0'"
      environment:
        ANSIBLE_SKIP_CONFLICT_CHECK: 1

    - name: Fetch and install the artifacts
      import_role:
        name: deploy-artifacts

- name: Copy api token from controller to appliance-ssh
  hosts: all
  gather_facts: false

  tasks:
    - name: Fetch file from appliance
      ansible.builtin.fetch:
        src: /tmp/kubeconfig_api.token
        dest: /tmp/
        flat: true
      when: inventory_hostname == 'kubernetes'

    - name: Copy file from local host to controller
      ansible.builtin.copy:
        src: /tmp/kubeconfig_api.token
        dest: /tmp/ansible_copy.txt
      when: inventory_hostname == 'master'
